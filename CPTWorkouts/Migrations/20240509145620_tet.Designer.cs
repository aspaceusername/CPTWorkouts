// <auto-generated />
using System;
using CPTWorkouts.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CPTWorkouts.Migrations
{
    [DbContext(typeof(CPTWorkoutsContext))]
    [Migration("20240509145620_tet")]
    partial class tet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CPTWorkouts.Models.Aulas", b =>
                {
                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date");

                    b.Property<int>("equipaFK")
                        .HasColumnType("int");

                    b.HasKey("Nome");

                    b.HasIndex("equipaFK");

                    b.ToTable("Aulas");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Clientes", b =>
                {
                    b.Property<int>("idClientes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idClientes"));

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dadosPessoais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("dataDeNascimento")
                        .HasColumnType("date");

                    b.HasKey("idClientes");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Compram", b =>
                {
                    b.Property<int>("idClientesFK")
                        .HasColumnType("int");

                    b.Property<int>("idServiçosFK")
                        .HasColumnType("int");

                    b.Property<string>("nomeServiços")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idClientesFK", "idServiçosFK");

                    b.HasIndex("idServiçosFK");

                    b.ToTable("Compram");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Equipas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Logotype")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Equipas");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Faturas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("idCliente")
                        .HasColumnType("int");

                    b.Property<string>("serviçosFK")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("idCliente")
                        .IsUnique();

                    b.ToTable("Faturas");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Inscrevem_se", b =>
                {
                    b.Property<int>("idClientesFK")
                        .HasColumnType("int");

                    b.Property<int>("idEquipasFK")
                        .HasColumnType("int");

                    b.Property<string>("nomeEquipas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idClientesFK", "idEquipasFK");

                    b.HasIndex("idEquipasFK");

                    b.ToTable("Inscrevem_se");
                });

            modelBuilder.Entity("CPTWorkouts.Models.MBWay", b =>
                {
                    b.Property<string>("transactionID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoMbWay")
                        .HasColumnType("int");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("customerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("transactionID");

                    b.ToTable("MBWay");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Pertencem", b =>
                {
                    b.Property<int>("idTreinadoresFK")
                        .HasColumnType("int");

                    b.Property<int>("idEquipasFK")
                        .HasColumnType("int");

                    b.Property<string>("nomeEquipas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTreinadoresFK", "idEquipasFK");

                    b.HasIndex("idEquipasFK");

                    b.ToTable("Pertencem");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Serviços", b =>
                {
                    b.Property<int>("idServiço")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idServiço"));

                    b.Property<int>("Preço")
                        .HasColumnType("int");

                    b.Property<string>("nomeServiço")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idServiço");

                    b.ToTable("Serviços");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Treinadores", b =>
                {
                    b.Property<int>("idTreinadores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTreinadores"));

                    b.Property<string>("AulasNome")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Nome")
                        .HasColumnType("int");

                    b.HasKey("idTreinadores");

                    b.HasIndex("AulasNome");

                    b.ToTable("Treinadores");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CellPhone")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("dataDeNascimento")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CPTWorkouts.Models.Aulas", b =>
                {
                    b.HasOne("CPTWorkouts.Models.Equipas", "Equipa")
                        .WithMany("Aulas")
                        .HasForeignKey("equipaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipa");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Compram", b =>
                {
                    b.HasOne("CPTWorkouts.Models.Clientes", "cliente")
                        .WithMany("Serviços")
                        .HasForeignKey("idClientesFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTWorkouts.Models.Serviços", "servico")
                        .WithMany()
                        .HasForeignKey("idServiçosFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cliente");

                    b.Navigation("servico");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Faturas", b =>
                {
                    b.HasOne("CPTWorkouts.Models.Clientes", "Cliente")
                        .WithOne("Fatura")
                        .HasForeignKey("CPTWorkouts.Models.Faturas", "idCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Inscrevem_se", b =>
                {
                    b.HasOne("CPTWorkouts.Models.Clientes", "Cliente")
                        .WithMany("Equipas")
                        .HasForeignKey("idClientesFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTWorkouts.Models.Equipas", "Equipa")
                        .WithMany("Clientes")
                        .HasForeignKey("idEquipasFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Equipa");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Pertencem", b =>
                {
                    b.HasOne("CPTWorkouts.Models.Equipas", "Equipa")
                        .WithMany("Treinadores")
                        .HasForeignKey("idEquipasFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTWorkouts.Models.Treinadores", "Treinador")
                        .WithMany()
                        .HasForeignKey("idTreinadoresFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipa");

                    b.Navigation("Treinador");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Treinadores", b =>
                {
                    b.HasOne("CPTWorkouts.Models.Aulas", null)
                        .WithMany("Treinadores")
                        .HasForeignKey("AulasNome");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CPTWorkouts.Models.Aulas", b =>
                {
                    b.Navigation("Treinadores");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Clientes", b =>
                {
                    b.Navigation("Equipas");

                    b.Navigation("Fatura");

                    b.Navigation("Serviços");
                });

            modelBuilder.Entity("CPTWorkouts.Models.Equipas", b =>
                {
                    b.Navigation("Aulas");

                    b.Navigation("Clientes");

                    b.Navigation("Treinadores");
                });
#pragma warning restore 612, 618
        }
    }
}
